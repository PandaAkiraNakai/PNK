name: Deploy React App to EC2

on:
  push:
    branches:
      - main # Cambia 'main' por 'master' si esa es tu rama principal

jobs:
  deploy:
    runs-on: ubuntu-latest # Elige el runner de GitHub Actions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Clona tu repositorio en el runner

      - name: Set up Node.js
        uses: actions/setup-node@v4 # Configura Node.js en el runner
        with:
          node-version: '20' # Usa la versión de Node.js que necesites para tu app

      - name: Install dependencies
        run: npm install # Instala las dependencias de tu proyecto

      - name: Build React App
        run: npm run build # Compila tu aplicación React. Esto creará la carpeta 'dist/'

      - name: Deploy to EC2
        # *** CAMBIO IMPORTANTE AQUÍ: CAMBIAMOS LA VERSIÓN DE LA ACCIÓN ***
        uses: appleboy/ssh-action@v0.1.10 # Esta versión soporta 'source' y 'target' para SCP.
        with:
          host: ${{ secrets.EC2_HOST }} # IP pública de tu instancia EC2 (desde los secretos de GitHub)
          username: ${{ secrets.EC2_USER }} # Usuario SSH de tu EC2 (ej. ec2-user) (desde los secretos de GitHub)
          key: ${{ secrets.EC2_SSH_KEY }} # Clave SSH privada (desde los secretos de GitHub)
          port: 22 # Puerto SSH, por defecto es 22

          # PARÁMETROS CLAVE PARA LA TRANSFERENCIA DE ARCHIVOS (SCP)
          source: "dist/" # Ruta de la carpeta compilada en el runner de GitHub Actions
          target: "/var/www/tu-app-react/" # Ruta de destino en tu instancia EC2

          # COMANDOS A EJECUTAR EN TU INSTANCIA EC2 DESPUÉS DE LA TRANSFERENCIA
          script: |
            # 1. Elimina los archivos viejos de la aplicación en EC2
            sudo rm -rf /var/www/tu-app-react/*

            # Los archivos de la carpeta 'dist' ya fueron copiados por los parámetros 'source' y 'target'.
            # NO NECESITAS UN 'sudo cp -r' AQUÍ.

            # 2. Reinicia Nginx para servir la nueva versión
            sudo systemctl restart nginx