name: Deploy React App to EC2 (Directamente en /var/www)

on:
  push:
    branches:
      - main # Se dispara con cada push a la rama 'main'

jobs:
  deploy:
    runs-on: ubuntu-latest # El runner de GitHub Actions

    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.10 # Usamos esta acción para ejecutar comandos en EC2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # --- Comandos ejecutados directamente en tu instancia EC2 ---

            APP_DIR="/var/www" # ¡La ruta directa a /var/www/!

            echo "Asegurando que el directorio '$APP_DIR' exista y tenga permisos..."
            sudo mkdir -p "$APP_DIR"
            # Asegura que el usuario que ejecuta el script tenga permisos sobre el directorio
            sudo chown -R ${{ secrets.EC2_USER }}:$(id -gn ${{ secrets.EC2_USER }}) "$APP_DIR"
            cd "$APP_DIR"

            # Verificar si el repositorio ya ha sido clonado
            if [ -d ".git" ]; then # Busca el .git directamente en el directorio actual (/var/www/)
              echo "Repositorio ya clonado, haciendo pull..."
              git pull origin main # Actualiza la rama main

            else
              echo "Repositorio NO clonado, realizando clonación inicial..."
              git clone https://github.com/PandaAkiraNakai/PNK.git . # Clona directamente en el directorio actual (/var/www/)
              echo "Clonación inicial completa en: '$APP_DIR'"
            fi

            echo "Instalando dependencias (si hay cambios en package.json)..."
            npm install # Se ejecuta dentro de /var/www/

            echo "Construyendo la aplicación React..."
            npm run build # Se ejecuta dentro de /var/www/, creando 'dist' en '/var/www/dist'

            echo "Reiniciando Nginx para servir la nueva versión..."
            sudo systemctl restart nginx
